This patches the ate-pairing library <https://github.com/herumi/ate-pairing>
to use a different curve.

The patch is released under the same license as the ate-pairing,
"modified new BSD License <http://opensource.org/licenses/BSD-3-Clause".
See the LICENSE file.

diff --git a/include/bn.h b/include/bn.h
index b8a3b3d..991d8f8 100644
--- a/include/bn.h
+++ b/include/bn.h
@@ -62,7 +62,7 @@ struct ParamT {
 	static Fp Z;
 	static Fp2 W2p;
 	static Fp2 W3p;
-	static Fp2 gammar[5];
+	static Fp2 gammar[6];
 	static Fp2 gammar2[5];
 	static Fp2 gammar3[5];
 	static Fp i0; // 0
@@ -78,7 +78,7 @@ struct ParamT {
 	static inline void init(int mode = -1, bool useMulx = true)
 	{
 		mie::zmInit();
-		const int64_t org_z = -((1LL << 62) + (1LL << 55) + (1LL << 0));
+		const int64_t org_z = 4965661367192848881LL; // NOTE: hard-coded Fp12::pow_neg_t too.
 		const int pCoff[] = { 1, 6, 24, 36, 36 };
 		const int rCoff[] = { 1, 6, 18, 36, 36 };
 		const int tCoff[] = { 1, 0,  6,  0,  0 };
@@ -89,17 +89,20 @@ struct ParamT {
 		largest_c = 6 * z + 2;
 		Fp::setModulo(p, mode, useMulx);
 		half = Fp(1) / Fp(2);
-		Fp2 xi(1, 1);
+		Fp2 xi(9, 1);
 		/*
-			b = 2,
-			b_invxi = 2 * xi.inverse(),
-			b/xi = [1, -1].
+			b = 3,
+			b_invxi = 3 * xi.inverse(),
+			b/xi = 266929791119991161246907387137283842545076965332900288569378510910307636690*U +
+			       19485874751759354771024239261021720505790618469301721065564631296452457478373
 		*/
-		b_invxi = Fp2(Fp("1"), -Fp("1"));
-		gammar[0] = mie::power(xi, (p - 1) / 6);
+		b_invxi = Fp2(Fp("19485874751759354771024239261021720505790618469301721065564631296452457478373"),
+					  Fp("266929791119991161246907387137283842545076965332900288569378510910307636690"));
+		gammar[0] = 1;
+		gammar[1] = mie::power(xi, (p - 1) / 6);
 
-		for (size_t i = 1; i < sizeof(gammar) / sizeof(*gammar); ++i) {
-			gammar[i] = gammar[i - 1] * gammar[0];
+		for (size_t i = 2; i < sizeof(gammar) / sizeof(*gammar); ++i) {
+			gammar[i] = gammar[i - 1] * gammar[1];
 		}
 
 		for (size_t i = 0; i < sizeof(gammar2) / sizeof(*gammar2); ++i) {
@@ -111,7 +114,7 @@ struct ParamT {
 		}
 
 		W2p = mie::power(xi, (p - 1) / 3);
-		W3p = mie::power(xi, ((3 * p - 1) / 2 - 1) / 3);
+		W3p = mie::power(xi, (p - 1) / 2); // ((3 * p - 1) / 2 - 1) / 3
 		Fp2 temp = mie::power(xi, (p * p - 1) / 6);
 		assert(temp.b_.isZero());
 		Fp::square(Z, -temp.a_);
@@ -157,7 +160,7 @@ template<class Fp2>
 Fp2 ParamT<Fp2>::W3p;
 
 template<class Fp2>
-Fp2 ParamT<Fp2>::gammar[5];
+Fp2 ParamT<Fp2>::gammar[6];
 template<class Fp2>
 Fp2 ParamT<Fp2>::gammar2[5];
 template<class Fp2>
@@ -166,13 +169,8 @@ Fp2 ParamT<Fp2>::gammar3[5];
 // Loop parameter for ate pairing.
 template<class Fp2>
 const int ParamT<Fp2>::siTbl[] = {
-	1, 1, 0, 0, 0,
-	0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
-	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-	0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
+// XITAG
+1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0
 };
 
 /*
@@ -287,17 +285,25 @@ struct Fp2T : public mie::local::addsubmul<Fp2T<T>
 	}
 
 	/*
+	  XITAG
 		u^2 = -1
-		xi = 1 + u
-		(a + bu)(1 + u) = (a - b) + (a + b)u
-
-		2 * Fp add/sub
+		xi = 9 + u
+		(a + bu)(9 + u) = (9a - b) + (a + 9b)u
 	*/
 	static inline void mul_xiC(Fp2T& z, const Fp2T& x)
 	{
 		assert(&z != &x);
-		Fp::sub(z.a_, x.a_, x.b_);
-		Fp::add(z.b_, x.a_, x.b_);
+		Fp::add(z.a_, x.a_, x.a_); // 2
+		Fp::add(z.a_, z.a_, z.a_); // 4
+		Fp::add(z.a_, z.a_, z.a_); // 8
+		Fp::add(z.a_, z.a_, x.a_); // 9
+		Fp::sub(z.a_, z.a_, x.b_);
+
+		Fp::add(z.b_, x.b_, x.b_); // 2
+		Fp::add(z.b_, z.b_, z.b_); // 4
+		Fp::add(z.b_, z.b_, z.b_); // 8
+		Fp::add(z.b_, z.b_, x.b_); // 9
+		Fp::add(z.b_, z.b_, x.a_);
 	}
 
 	/*
@@ -306,10 +312,10 @@ struct Fp2T : public mie::local::addsubmul<Fp2T<T>
 	static inline void squareC(Fp2T& z, const Fp2T& x)
 	{
 		Fp t, tt;
-		Fp::addNC(t, x.b_, x.b_); // 2b
+		Fp::add(t, x.b_, x.b_); // 2b
 		t *= x.a_; // 2ab
 		Fp::sub(tt, x.a_, x.b_); // a - b
-		Fp::addNC(z.a_, x.a_, x.a_); // a + b
+		Fp::add(z.a_, x.a_, x.b_); // a + b
 		z.a_ *= tt; // (a - b)(a + b)
 		z.b_ = t;
 	}
@@ -502,11 +508,26 @@ struct Fp2T : public mie::local::addsubmul<Fp2T<T>
 			FpDbl::subNC(z.b_, x.b_, y.b_);
 		}
 
+		/*
+		  XITAG
+		  u^2 = -1
+		  xi = 9 + u
+		  (a + bu)(9 + u) = (9a - b) + (a + 9b)u
+		*/
 		static void mul_xiC(Dbl& z, const Dbl& x)
 		{
 			assert(&z != &x);
-			FpDbl::sub(z.a_, x.a_, x.b_);
-			FpDbl::add(z.b_, x.b_, x.a_);
+			FpDbl::add(z.a_, x.a_, x.a_); // 2
+			FpDbl::add(z.a_, z.a_, z.a_); // 4
+			FpDbl::add(z.a_, z.a_, z.a_); // 8
+			FpDbl::add(z.a_, z.a_, x.a_); // 9
+			FpDbl::sub(z.a_, z.a_, x.b_);
+
+			FpDbl::add(z.b_, x.b_, x.b_); // 2
+			FpDbl::add(z.b_, z.b_, z.b_); // 4
+			FpDbl::add(z.b_, z.b_, z.b_); // 8
+			FpDbl::add(z.b_, z.b_, x.b_); // 9
+			FpDbl::add(z.b_, z.b_, x.a_);
 		}
 
 		static void mulOptC(Dbl& z, const Fp2T& x, const Fp2T& y, int mode)
@@ -791,6 +812,9 @@ struct Fp6T : public mie::local::addsubmul<Fp6T<T>,
 	{
 		Fp2 t0, t1, t2, t3, t4, t5;
 		Fp2Dbl T0, T1, T2;
+		// X1, Y1, Z1 == R[0], R[1], R[2]
+ 		// xp, yp = P[0], P[1]
+
 		// # 1
 		Fp2::square(t0, R[2]);
 		Fp2::mul(t4, R[0], R[1]);
@@ -802,15 +826,16 @@ struct Fp6T : public mie::local::addsubmul<Fp6T<T>,
 		// # 3
 		t0 += t3;
 		// # 4
-		// (a + bu)(1 - u) = (a + b) + (b - a)u
-		Fp::add(t2.a_, t0.a_, t0.b_);
-		Fp::sub(t2.b_, t0.b_, t0.a_);
+		// (a + bu) * binv_xi
+		Fp2::mul(t2, t0, ParamT<Fp2>::b_invxi);
+		//Fp::add(t2.a_, t0.a_, t0.b_);
+		//Fp::sub(t2.b_, t0.b_, t0.a_);
 		// # 5
 		Fp2::square(t0, R[0]);
 		Fp2::add(t3, t2, t2);
 		// ## 6
 		t3 += t2;
-		Fp2::addNC(l.c_, t0, t0);
+		Fp2::addNC(l.c_, t0, t0); // v^2 term
 		// ## 7
 		Fp2::sub(R[0], t1, t3);
 		Fp2::addNC(l.c_, l.c_, t0);
@@ -825,7 +850,7 @@ struct Fp6T : public mie::local::addsubmul<Fp6T<T>,
 		Fp2Dbl::addNC(T2, T1, T1);
 		Fp2::add(t3, R[1], R[2]);
 		// # 11
-		Fp2Dbl::addNC(T2, T2, T1);
+		Fp2Dbl::add(T2, T2, T1);
 		Fp2::square(t3, t3);
 		// # 12
 		t3 -= t5;
@@ -1057,9 +1082,11 @@ struct Fp6T : public mie::local::addsubmul<Fp6T<T>,
 			FpDbl::sub(z.c_.a_, z.c_.a_, z.b_.a_);
 			// # 13
 			FpDbl::subNC(z.c_.b_, z.c_.b_, z.b_.b_);
+			/// c1 except xi * t2 term
 			// # 14, 15
-			FpDbl::subOpt1(z.b_.a_, T2.a_, T2.b_);
-			FpDbl::add(z.b_.b_, T2.a_, T2.b_);
+			Fp2Dbl::mul_xi(z.b_, T2); // store xi * t2 term
+			// FpDbl::subOpt1(z.b_.a_, T2.a_, T2.b_); // do not do things in place, lol
+			// FpDbl::add(z.b_.b_, T2.a_, T2.b_);
 			// # 16
 			Fp2Dbl::add(z.b_, z.b_, z.c_);
 			// # 17
@@ -1267,7 +1294,7 @@ struct Fp12T : public mie::local::addsubmul<Fp12T<T> > {
 		Fp2Dbl::square(T1, x1);
 		Fp2Dbl::mul_xi(T2, T1);
 //		T2 += T0;
-		Fp2Dbl::addNC(T2, T2, T0); // RRR
+		Fp2Dbl::add(T2, T2, T0); // RRR
 		Fp2::add(z1, x0, x1);
 		Fp2Dbl::mod(z0, T2);
 		// overwrite z[0] (position 0).
@@ -1444,38 +1471,56 @@ struct Fp12T : public mie::local::addsubmul<Fp12T<T> > {
 
 	void Frobenius(Fp12T& z) const
 	{
+		/* this assumes (q-1)/6 is odd */
 		assert(this != &z);
+
 		z.a_.a_.a_ = a_.a_.a_;
 		Fp::neg(z.a_.a_.b_, a_.a_.b_);
+
 		z.a_.b_.a_ = a_.b_.a_;
 		Fp::neg(z.a_.b_.b_, a_.b_.b_);
-		Fp2::mul_Fp_1(z.a_.b_, Param::gammar[1].b_);
+		Fp2::mul(z.a_.b_, z.a_.b_, Param::gammar[2]);
+
 		z.a_.c_.a_ = a_.c_.a_;
 		Fp::neg(z.a_.c_.b_, a_.c_.b_);
-		Fp2::mul_Fp_0(z.a_.c_,  z.a_.c_, Param::gammar[3].a_);
+		Fp2::mul(z.a_.c_, z.a_.c_, Param::gammar[4]);
+
 		z.b_.a_.a_ = b_.a_.a_;
 		Fp::neg(z.b_.a_.b_, b_.a_.b_);
-		z.b_.a_ *= Param::gammar[0];
+		Fp2::mul(z.b_.a_, z.b_.a_, Param::gammar[1]);
+
 		z.b_.b_.a_ = b_.b_.a_;
 		Fp::neg(z.b_.b_.b_, b_.b_.b_);
-		z.b_.b_ *=  Param::gammar[2];
+		Fp2::mul(z.b_.b_, z.b_.b_, Param::gammar[3]);
+
 		z.b_.c_.a_ = b_.c_.a_;
 		Fp::neg(z.b_.c_.b_, b_.c_.b_);
-		z.b_.c_ *=  Param::gammar[4];
+		Fp2::mul(z.b_.c_, z.b_.c_, Param::gammar[5]);
 	}
 
 	void Frobenius2(Fp12T& z) const
 	{
+		// TODO: fix this
+		Fp12T zcopy;
+		this->Frobenius(zcopy);
+		zcopy.Frobenius(z);
+/*
 		z.a_.a_ = a_.a_;
-		Fp2::mul_Fp_0(z.a_.b_, a_.b_, Param::gammar2[1].a_);
-		Fp2::mul_Fp_0(z.a_.c_, a_.c_, Param::gammar2[3].a_);
-		Fp2::mul_Fp_0(z.b_.a_, b_.a_, Param::gammar2[0].a_);
-		Fp2::mul_Fp_0(z.b_.b_, b_.b_, Param::gammar2[2].a_);
-		Fp2::mul_Fp_0(z.b_.c_, b_.c_, Param::gammar2[4].a_);
+		Fp2::mul(z.a_.b_, a_.b_, Param::gammar[3]);
+		Fp2::mul(z.a_.c_, a_.c_, Param::gammar[1]);
+		Fp2::mul(z.b_.a_, b_.a_, Param::gammar[1]);
+		z.b_.b_ = b_.b_;
+		Fp2::mul(z.b_.c_, b_.c_, Param::gammar[3]);
+*/
 	}
 
 	void Frobenius3(Fp12T& z) const
 	{
+		// TODO: fix this
+		Fp12T zcopy;
+		this->Frobenius2(zcopy);
+		zcopy.Frobenius(z);
+/*
 		z.a_.a_.a_ = a_.a_.a_;
 		Fp::neg(z.a_.a_.b_, a_.a_.b_);
 		z.a_.b_.a_ = a_.b_.a_;
@@ -1493,6 +1538,7 @@ struct Fp12T : public mie::local::addsubmul<Fp12T<T> > {
 		z.b_.c_.a_ = b_.c_.a_;
 		Fp::neg(z.b_.c_.b_, b_.c_.b_);
 		Fp2::mul(z.b_.c_, z.b_.c_, Param::gammar3[4]);
+*/
 	}
 
 	/*
@@ -1500,6 +1546,11 @@ struct Fp12T : public mie::local::addsubmul<Fp12T<T> > {
 	*/
 	void mapToCyclo(Fp12T& z)
 	{
+		// (a + b*i) -> ((a - b*i) * (a + b*i)^(-1))^(q^2+1)
+		//
+		// See Beuchat page 9: raising to 6-th power is the same as
+		// conjugation, so this entire function computes
+		// z^((p^6-1) * (p^2+1))
 		z.a_ = a_;
 		Fp6::neg(z.b_, b_);
 		inverse();
@@ -1517,42 +1568,81 @@ struct Fp12T : public mie::local::addsubmul<Fp12T<T> > {
 
 		*this = final_exp(*this)
 	*/
+
+	static void pow_neg_t(Fp12T &out, const Fp12T &in)
+	{
+		int64_t t = 4965661367192848881LL;
+		out = 1;
+
+		int64_t bitcount = 0, tcopy = t;
+		while (tcopy != 0)
+		{
+			tcopy >>= 1;
+			++bitcount;
+		}
+
+		for (int64_t b = bitcount - 1; b >= 0; --b)
+		{
+			out.sqru();
+			// Fp12T::mul(out, out, out);
+
+			if ((t & (1ll << b)) != 0)
+			{
+				Fp12T::mul(out, out, in);
+			}
+		}
+
+		// invert by conjugation
+		Fp6::neg(out.b_, out.b_);
+	}
+
 	void final_exp()
 	{
 		Fp12T f, f2z, f6z, f6z2, f12z3;
 		Fp12T a, b;
 		Fp12T& z = *this;
 		mapToCyclo(f);
+
 		// Hard part starts from here.
 		// Computes addition chain.
-		typedef CompressT<Fp2> Compress;
-		Compress::fixed_power(f2z, f);
-		f2z.sqru();
+		// typedef CompressT<Fp2> Compress;
+		// Compress::fixed_power(f2z, f);
+		Fp12T::pow_neg_t(f2z, f);
+		f2z.sqru();                       // f2z = f^(-2*z)
+		//Fp12T::mul(f2z, f2z, f2z);
 		f2z.sqru(f6z);
-		f6z *= f2z;
-		Compress::fixed_power(f6z2, f6z);
+		//Fp12T::mul(f6z, f2z, f2z);
+		f6z *= f2z;                       // f6z = f^(-6*z)
+		// Compress::fixed_power(f6z2, f6z); // f6z2 = f^(6*z^2)
+		Fp12T::pow_neg_t(f6z2, f6z);
 		// A variable a is unnecessary only here.
 		f6z2.sqru(a);
-		Compress::fixed_power(f12z3, a);
+		// Fp12T::mul(a, f6z2, f6z2);
+		// Compress::fixed_power(f12z3, a);  // f12z3 = f^(-12*z^3)
+		Fp12T::pow_neg_t(f12z3, a);
 		// It will compute inversion of f2z, thus, conjugation free.
-		Fp6::neg(f6z.b_, f6z.b_);
-		Fp6::neg(f12z3.b_, f12z3.b_);
+		Fp6::neg(f6z.b_, f6z.b_);         // f6z = f^(6z)
+		Fp6::neg(f12z3.b_, f12z3.b_);     // f12z3 = f^(12*z^3)
 		// Computes a and b.
-		Fp12T::mul(a, f12z3, f6z2);
-		a *= f6z;
-		Fp12T::mul(b, a, f2z);
+		Fp12T::mul(a, f12z3, f6z2);       // a = f^(12*z^3 + 6z^2)
+		a *= f6z;                         // a = f^(12*z^3 + 6z^2 + 6z)
+		Fp12T::mul(b, a, f2z);            // b = f^(12*z^3 + 6z^2 + 4z)w
 		// @note f2z, f6z, and f12z are unnecessary from here.
 		// Last part.
-		Fp12T::mul(z, a, f6z2);
-		z *= f;
-		b.Frobenius(f2z);
-		z *= f2z;
-		a.Frobenius2(f2z);
-		z *= f2z;
-		Fp6::neg(f.b_, f.b_);
-		b *= f;
-		b.Frobenius3(f2z);
-		z *= f2z;
+		Fp12T::mul(z, a, f6z2);          // z = f^(12*z^3 + 12z^2 + 6z)
+		z *= f;                          // z = f^(12*z^3 + 12z^2 + 6z + 1)
+		b.Frobenius(f2z);                // f2z = f^(q(12*z^3 + 6z^2 + 4z))
+		z *= f2z;                        // z = f^(q(12*z^3 + 6z^2 + 4z) + (12*z^3 + 12z^2 + 6z + 1))
+		a.Frobenius2(f2z);               // f2z = f^(q^2(12*z^3 + 6z^2 + 6z))
+		z *= f2z;                        // z = f^(q^2(12*z^3 + 6z^2 + 6z) + q(12*z^3 + 6z^2 + 4z) + (12*z^3 + 12z^2 + 6z + 1))
+		Fp6::neg(f.b_, f.b_);            // f = -f
+		b *= f;                          // b = f^(12*z^3 + 6z^2 + 4z - 1)
+		b.Frobenius3(f2z);               // f2z = f^(q^3(12*z^3 + 6z^2 + 4z - 1))
+		z *= f2z;                        // z = f^(q^3(12*z^3 + 6z^2 + 4z - 1) +
+                                         //       q^2(12*z^3 + 6z^2 + 6z) +
+                                         //       q(12*z^3 + 6z^2 + 4z) +
+                                         //       (12*z^3 + 12z^2 + 6z + 1))
+										 // see page 6 in the "Faster hashing to G2" paper
 	}
 
 	struct Dbl : public mie::local::addsubmul<Dbl, mie::local::hasNegative<Dbl> > {
@@ -2353,30 +2443,56 @@ void FrobEndOnTwist_1(Fp2T<Fp>* Q, const Fp2T<Fp>* P)
 {
 	typedef Fp2T<Fp> Fp2;
 	typedef ParamT<Fp2> Param;
+	// applying Q[0] <- P[0]^q
 	Q[0].a_ = P[0].a_;
 	Fp::neg(Q[0].b_, P[0].b_);
-	Fp2::mul_Fp_1(Q[0], Param::W2p.b_);
+
+	// Q[0] *= xi^((p-1)/3)
+	Q[0] *= Param::gammar[2];
+
+	// applying Q[1] <- P[1]^q
 	Q[1].a_ = P[1].a_;
 	Fp::neg(Q[1].b_, P[1].b_);
-	Q[1] *= Param::W3p;
+
+	// Q[1] *= xi^((p-1)/2)
+	Q[1] *= Param::gammar[3];
 }
 
 template<class Fp>
 void FrobEndOnTwist_2(Fp2T<Fp>* Q, const Fp2T<Fp>* P)
 {
+	Fp2T<Fp> scratch[2];
+	FrobEndOnTwist_1(scratch, P);
+	FrobEndOnTwist_1(Q, scratch);
+/*
 	typedef Fp2T<Fp> Fp2;
 	typedef ParamT<Fp2> Param;
-	Fp2::mul_Fp_0(Q[0], P[0], Param::Z);
+	//Fp2::mul_Fp_0(Q[0], P[0], Param::Z);
+	//Fp2::neg(Q[1], P[1]);
+	//Q[0] = P[0] * Param::gammar[3];
+	Q[0] = P[0];
+	Q[0] *= Param::W2p;
+	Q[0] *= Param::W2p;
+
+	//Q[1] = P[1];
 	Fp2::neg(Q[1], P[1]);
+*/
 }
 
 template<class Fp>
 void FrobEndOnTwist_8(Fp2T<Fp>* Q, const Fp2T<Fp>* P)
 {
+	Fp2T<Fp> scratch2[2], scratch4[2], scratch6[2];
+	FrobEndOnTwist_2(scratch2, P);
+	FrobEndOnTwist_2(scratch4, scratch2);
+	FrobEndOnTwist_2(scratch6, scratch4);
+	FrobEndOnTwist_2(Q, scratch6);
+/*
 	typedef Fp2T<Fp> Fp2;
 	typedef ParamT<Fp2> Param;
-	Fp2::mul_Fp_0(Q[0], P[0], Param::Z);
+	Q[0] = P[0] * Param::gammar[3];
 	Q[1] = P[1];
+*/
 }
 
 } // namespace ecop
@@ -2432,10 +2548,14 @@ void opt_atePairing(Fp12T<Fp6T<Fp2T<Fp> > >& f, const Fp2T<Fp> Q[2], const Fp _P
 	Fp2 Q1[2];
 	ecop::FrobEndOnTwist_1(Q1, Q);
 	Fp2 Q2[2];
-	ecop::FrobEndOnTwist_8(Q2, Q);
+	ecop::FrobEndOnTwist_2(Q2, Q);
+	Fp2::neg(Q2[1], Q2[1]);
 	// @memo z < 0
-	Fp6::neg(f.b_, f.b_);
-	Fp2::neg(T[1], T[1]);
+	if (0) // for us z > 0, so no go
+	{
+		Fp6::neg(f.b_, f.b_);
+		Fp2::neg(T[1], T[1]);
+	}
 	Fp12 ft;
 	Fp6::pointAddLineEval(d, T, Q1, P); // 5k
 	Fp6::pointAddLineEval(e, T, Q2, P); // 5k
diff --git a/src/zm.cpp b/src/zm.cpp
index 486e916..d53fbf7 100644
--- a/src/zm.cpp
+++ b/src/zm.cpp
@@ -1,5 +1,6 @@
 #include "zm.h"
 #include "xbyak/xbyak.h"
+#include <cstdio>
 
 using namespace mie;
 using namespace Xbyak;
@@ -10,6 +11,7 @@ using namespace Xbyak;
 */
 static inline bool in_addN(Unit *out, const Unit *x, const Unit *y, size_t n)
 {
+	printf("in_addN\n");
 	assert(n > 0);
 
 	Unit c = 0;
@@ -119,6 +121,8 @@ static inline Unit mulUnit(Unit *H, Unit a, Unit b)
 */
 static inline void in_mul(Unit *out, const Unit *x, size_t n, Unit y)
 {
+	printf("in_mul\n");
+
 	assert(n > 0);
 	Unit H = 0;
 	for (size_t i = 0; i < n; i++) {
diff --git a/src/zm2.cpp b/src/zm2.cpp
index f6ce9d9..a2179c9 100644
--- a/src/zm2.cpp
+++ b/src/zm2.cpp
@@ -1461,8 +1461,37 @@ L("@@");
 	void in_Fp2_mul_xi(const RegExp& mz, const RegExp& mx)
 	{
 		mov32c(rax, (uint64_t)&s_pTbl[1]);
+/*
 		in_Fp_sub(mz, mx, mx + 32);
 		in_Fp_add(mz + 32, mx, mx + 32);
+
+-		Fp::sub(z.a_, x.a_, x.b_);
+-		Fp::add(z.b_, x.a_, x.b_);
+*/
+/*
++		Fp::add(z.a_, x.a_, x.a_); // 2
++		Fp::add(z.a_, z.a_, z.a_); // 4
++		Fp::add(z.a_, z.a_, z.a_); // 8
++		Fp::add(z.a_, z.a_, x.a_); // 9
++		Fp::sub(z.a_, z.a_, x.b_);
++
++		Fp::add(z.b_, x.b_, x.b_); // 2
++		Fp::add(z.b_, z.b_, z.b_); // 4
++		Fp::add(z.b_, z.b_, z.b_); // 8
++		Fp::add(z.b_, z.b_, x.b_); // 9
++		Fp::add(z.b_, z.b_, x.a_);
+*/
+		in_Fp_add(mz, mx, mx); // 2
+		in_Fp_add(mz, mz, mz); // 4
+		in_Fp_add(mz, mz, mz); // 8
+		in_Fp_add(mz, mz, mx); // 9
+		in_Fp_sub(mz, mz, mx + 32);
+
+		in_Fp_add(mz + 32, mx + 32, mx + 32); // 2
+		in_Fp_add(mz + 32, mz + 32, mz + 32); // 4
+		in_Fp_add(mz + 32, mz + 32, mz + 32); // 8
+		in_Fp_add(mz + 32, mz + 32, mx + 32); // 9
+		in_Fp_add(mz + 32, mz + 32, mx);
 	}
 	void make_Fp2_mul_xi()
 	{
@@ -1648,6 +1677,15 @@ L("@@");
 	void in_Fp2_square()
 	{
 //begin_clock();
+/*
+		Fp t, tt;
+		Fp::add(t, x.b_, x.b_); // 2b
+		t *= x.a_; // 2ab
+		Fp::sub(tt, x.a_, x.b_); // a - b
+		Fp::add(z.a_, x.a_, x.b_); // a + b
+		z.a_ *= tt; // (a - b)(a + b)
+		z.b_ = t;
+*/
 		const Ext2<Fp> z(gp1);
 		const Ext2<Fp> x(gp2);
 		const Ext1<Fp> t(rsp);
@@ -1656,8 +1694,10 @@ L("@@");
 		const int SS = d1.next;
 		sub(rsp, SS);
 
+		mov32c(rax, (uint64_t)&s_pTbl[1]);
 		load_rm(gt4, gt3, gt2, gt1, x.b_);
 		add_rr(gt4, gt3, gt2, gt1, gt4, gt3, gt2, gt1);
+		in_Fp_add_modp(); // XITAG
 		store_mr(t, gt4, gt3, gt2, gt1); // t = 2 * b
 
 		// d0 = t[3..0] * a
@@ -1669,7 +1709,8 @@ L("@@");
 		sub_rm(gt4, gt3, gt2, gt1, x.b_); // a + p - b
 		store_mr(t, gt4, gt3, gt2, gt1); // t = a + p - b
 
-		in_Fp_add_carry(z.a_, x.a_, x.b_, false); // z.a_ = a + b
+		// in_Fp_add_carry(z.a_, x.a_, x.b_, false); // z.a_ = a + b
+		in_Fp_add(z.a_, x.a_, x.b_);
 
 		// d1 = (a + p - b)(a + b)
 		mul4x4(d1, t, z.a_, gt10, gt9, gt8, gt7, gt6, gt5, gt4, gt3, gt2, gt1);
@@ -1978,8 +2019,36 @@ L("@@");
 		align(16);
 		p_Fp2Dbl_mul_xi = (void*)const_cast<uint8_t*>(getCurr());
 		mov32c(rax, (uint64_t)&s_pTbl[1]);
+/*
+-			FpDbl::sub(z.a_, x.a_, x.b_);
+-			FpDbl::add(z.b_, x.b_, x.a_);
 		sub_FpDbl_sub(gp1, gp2, gp2 + sizeof(FpDbl));
 		in_FpDbl_add(gp1 + 64, gp2 + sizeof(FpDbl), gp2);
+*/
+/*
++			FpDbl::add(z.a_, x.a_, x.a_); // 2
++			FpDbl::add(z.a_, z.a_, z.a_); // 4
++			FpDbl::add(z.a_, z.a_, z.a_); // 8
++			FpDbl::add(z.a_, z.a_, x.a_); // 9
++			FpDbl::sub(z.a_, z.a_, x.b_);
++
++			FpDbl::add(z.b_, x.b_, x.b_); // 2
++			FpDbl::add(z.b_, z.b_, z.b_); // 4
++			FpDbl::add(z.b_, z.b_, z.b_); // 8
++			FpDbl::add(z.b_, z.b_, x.b_); // 9
++			FpDbl::add(z.b_, z.b_, x.a_);
+*/
+		in_FpDbl_add(gp1, gp2, gp2); // 2
+		in_FpDbl_add(gp1, gp1, gp1); // 4
+		in_FpDbl_add(gp1, gp1, gp1); // 8
+		in_FpDbl_add(gp1, gp1, gp2); // 9
+		sub_FpDbl_sub(gp1, gp1, gp2 + sizeof(FpDbl));
+
+		in_FpDbl_add(gp1 + 64, gp2 + sizeof(FpDbl), gp2 + sizeof(FpDbl)); // 2
+		in_FpDbl_add(gp1 + 64, gp1 + 64, gp1 + 64); // 4
+		in_FpDbl_add(gp1 + 64, gp1 + 64, gp1 + 64); // 8
+		in_FpDbl_add(gp1 + 64, gp1 + 64, gp2 + sizeof(FpDbl)); // 9
+		in_FpDbl_add(gp1 + 64, gp1 + 64, gp2);
 		ret();
 	}
 
@@ -2104,11 +2173,14 @@ L("@@");
 		// FpDbl::subNC(z.c_.b_, z.c_.b_, z.b_.b_);
 		in_FpDbl_subNC(z.c_.b_, z.c_.b_, z.b_.b_);
 
+		// XITAG
+		in_Fp2Dbl_mul_xi(z.b_, T2);
+
 		// FpDbl::subOpt1(z.b_.a_, T2.a_, T2.b_);
-		in_FpDbl_subOpt1(z.b_.a_, T2.a_, T2.b_);
+		//in_FpDbl_subOpt1(z.b_.a_, T2.a_, T2.b_);
 
 		// FpDbl::add(z.b_.b_, T2.a_, T2.b_);
-		in_FpDbl_add(z.b_.b_, T2.a_, T2.b_);
+		//in_FpDbl_add(z.b_.b_, T2.a_, T2.b_);
 
 		// Fp2Dbl::add(z.b_, z.b_, z.c_);
 		in_Fp2Dbl_add(z.b_, z.b_, z.c_);
@@ -3300,13 +3372,19 @@ L("@@");
 		Fp2::mul = (void (*)(Fp2&, const Fp2&, const Fp2&))getCurr();
 		make_Fp2_mul();
 
+		// XITAG
+#if 1
 		align(16);
 		Fp2::mul_xi = (void (*)(Fp2&, const Fp2&))getCurr();
 		make_Fp2_mul_xi();
+#endif
 
+#if 1
+		// TODO: seems to work fine. should we change it?!
 		align(16);
 		Fp2::square = (void (*)(Fp2&, const Fp2&))getCurr();
 		make_Fp2_square();
+#endif
 
 		align(16);
 		Fp2::mul_Fp_0 = (void (*)(Fp2&, const Fp2&, const Fp&))getCurr();
@@ -3354,9 +3432,12 @@ L("@@");
 		Fp2Dbl::mod = (void (*)(Fp2 &, const Fp2Dbl &))getCurr();
 		make_Fp2Dbl_mod();
 
+		// XITAG
+#if 1
 		align(16);
 		Fp2Dbl::mul_xi = (void (*)(Fp2Dbl &, const Fp2Dbl &))getCurr();
 		make_Fp2Dbl_mul_xi();
+#endif
 
 		// setup Fp6
 
@@ -3368,26 +3449,37 @@ L("@@");
 		Fp6::sub = (void (*)(Fp6&, const Fp6&, const Fp6&))getCurr();
 		make_Fp6_sub();
 
+		// XITAG
+#if 0
 		align(16);
 		Fp6::pointDblLineEval = (void (*)(Fp6& l, Fp2 *R, const Fp *P))getCurr();
 		make_pointDblLineEval();
+#endif
 
+#if 1
 		align(16);
 		Fp6Dbl::mul = (void (*)(Fp6Dbl&, const Fp6&, const Fp6&))getCurr();
 		make_Fp6Dbl_mul();
+#endif
 
+#if 1
+		// XITAG
 		align(16);
 		Fp6::mul = (void (*)(Fp6&, const Fp6&, const Fp6&))getCurr();
 		make_Fp6_mul();
+#endif
 
 		align(16);
 		Compress::square_n = (void (*)(Compress&, int n))getCurr();
 		make_Compress_square_n();
 
+#if 1
+		// XITAG
 		align(16);
 		Fp12::square = (void (*)(Fp12& z))getCurr();
 		make_Fp12_square();
 
+		// XITAG
 		align(16);
 		Fp12::mul = (void (*)(Fp12& z, const Fp12& x, const Fp12& y))getCurr();
 		make_Fp12_mul();
@@ -3395,7 +3487,7 @@ L("@@");
 		align(16);
 		Fp12Dbl::mul_Fp2_024 = (void (*)(Fp12 &x, const Fp6& y))getCurr();
 		make_Fp12Dbl_mul_Fp2_024();
-
+#endif
 //		printf("jit code size=%d\n", (int)getSize());
 	}
 	bool isRaxP_; // true if rax is set to a pointer to p
diff --git a/test/bn.cpp b/test/bn.cpp
index 73b6331..7857d0e 100644
--- a/test/bn.cpp
+++ b/test/bn.cpp
@@ -1661,7 +1661,7 @@ void testParameters()
 		const char* b;
 	};
 	{
-		const Fp2 (&gammar)[5] = Param::gammar;
+		const Fp2 (&gammar)[6] = Param::gammar;
 		const Fp2_str gammar_str[] = {
 			{
 				"12310438583873020660552735091161044116898065562217439662059245424880585960937",
